import itertools
import operator as op
import os
import subprocess
import sqlite3
import tempfile


class GNUGlobal:
    """Support GNU Global source code tagging system"""

    def __init__(self, tagdir: str):
        """Initialize the GNU Global database.
        Args:
            tagdir: a path to the directory containing tagged database, generated by `gtags`.
        """
        self.tagdir = tagdir

    @classmethod
    def gtags(cls, srcdir: str, tagdir: str | None = None):
        """Construct a tag database with GNU Global.
        Args:
            srcdir: a path to the source code directory.
            tagdir: a path to a tag database directory, use temporal direectory if it is not given.
        """
        tagdir = tagdir or tempfile.mkdtemp()
        os.makedirs(tagdir, exist_ok=True)
        results = subprocess.run(
            [
                "gtags",
                "--skip-unreadable",
                "--sqlite",
                os.path.abspath(tagdir),
            ],
            cwd=srcdir,
            env={**os.environ, "GTAGSLABEL": "new-ctags"},
        )
        results.check_returncode()
        return cls(tagdir)

    def _find_symbol(
        self, db: sqlite3.Connection, symbol: str
    ) -> dict[str, list[int | range]]:
        """Find the symbol from the database.
        Args:
            db: a database connection.
            symbol: the taget symbol.
        Returns:
            list of found symbols, path and line numbers. (0-based index)
        """
        _query = "select dat from db where key=? collate nocase"
        with sqlite3.connect(os.path.join(self.tagdir, "GPATH")) as path_db:
            found = {}
            for (desc,) in db.execute(_query, (symbol,)).fetchall():
                if "@n" not in desc:
                    continue
                # retrieve the path to the source code
                pathid, desc = desc.split(" @n ", maxsplit=1)
                if (row := path_db.execute(_query, (pathid,)).fetchone()) is not None:
                    (path,) = row
                else:
                    path = f"FAILURE#{pathid}"
                # retrieve lineno
                seg, *_ = desc.split(maxsplit=1)
                _accum, lineno = 0, []
                for term in seg.split(","):
                    # single line
                    if "-" not in term:
                        _accum += int(term)
                        lineno.append(_accum - 1)
                        continue
                    # half-closed interval
                    start, offset = term.split("-")
                    _accum += int(start)
                    lineno.append(range(_accum - 1, _accum + int(offset) - 1))

                    _accum += int(offset)

                found[path] = lineno
            return found

    def find_definition(self, symbol: str) -> dict[str, list[int | range]]:
        """Find the definition about the given symbol.
        Args:
            symbol: the target symbol.
        Returns:
            list of found definitions, path and line numbers. (0-based index)
        """
        with sqlite3.connect(os.path.join(self.tagdir, "GTAGS")) as db:
            return self._find_symbol(db, symbol)

    def find_references(self, symbol: str) -> dict[str, list[int | range]]:
        """Find the references about the given symbol.
        Args:
            symbol: the target symbol.
        Returns:
            list of found references, path and line numbers. (0-based index)
        """
        with sqlite3.connect(os.path.join(self.tagdir, "GRTAGS")) as db:
            return self._find_symbol(db, symbol)
